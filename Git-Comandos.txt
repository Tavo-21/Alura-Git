cdgit --version
Para saber la version de nuestro git

dir
Visualizacion de carpetas

cd Documents/Oracle-One/8-Git/
Entrar a la carpeta

ls
Ver archivos de la carpeta

git init
Crear un repositorio

git status
Comando en el git sabe los cambios y estado de los archivos dentro del respositorio

git add (nombre del archvio) 
Monitorear cambios del archivo

git add .
Monitorear todos los archivos de la carpeta

git rm --cached (nombre del archivo o .)
Dejar de monitorear

git commit -m "Creando archivo prueba con listas de uso pruebaGit.html"
Guardar modificacion en el repositorio de Git, podemos crear un checkpoint o un punto, toca indicar que se modifico

git config --global user.email "nombre de email"
recibir mensajes
git config --global user.name "nombre"
||||||||||||||||||
|||||||||||||||
|||||||||||
Esto es por si el commit fallo 


//////////-----------------------NOTA-----------------------//////////
a tener en cuenta
git add monitorear todos los cambios

git commit -m "" guardar modificacion

repetir instrucciones
//////////--------------------------------------------------//////////

Antes de cualquier interacción con git, es necesario informar quién eres para que almacene correctamente los datos del autor de cada uno de los cambios en el código.

En el video no hice mucho hincapié en esto, pero para que puedas hacer esto en tu computadora, si estás comenzando a usar git ahora, simplemente escribe los siguientes comandos (estando en la carpeta del repositorio de git):
git config --local user.name "Tu nombre aquí"
git config --local user.email "Tu@email.aqui”

git log
Historico de modificacion

clear
limpar pantalla

git log --oneline
historico resumido

git log -p
ver modificacion de codigo
:q para salir del git log -p y similares

$ git log --pretty="format:%H %s"


.gitignore
-Creamos un achivo  manual con ese nombre y dentro colocamos los nombres
de las carpetas o archivos que quermos ignorar

-Igualmente hacemos un git add y un commit a el archivo .gitignore

---------------------------------------------------------------------
---------------------------------------------------------------------
cd .. salir carpeta
mkdier (Nombre carepta) crear otra carpeta
cd (Nombre carpeta)/ entrar en la carpeta

git init --bare
Este repositorio solo contiene las modificaciones de los archivos
--¡Opción correcta! Con este comando creamos un repositorio que no 
tendrá la working tree, o sea, no contendrá una copia de nuestros 
archivos. Como el repositorio servirá solo como servidor, 
para que otros miembros del equipo sincronicen sus trabajos, 
disminuimos espacio de almacenamiento de esta forma.

C:/Users/USUARIO/Documents/Oracle-One/8-ServidorGit/
Camino del repositorio remoto

Recapitulando en otra carpeta aparte hicimos un servidor remoto y ahora
es conectar nuestra carpeta local o archivos al servidor remoto para el
traspaso de informacion y demas. Entonces volvemos a entrar a nuestra
carpeta que ibamos trabajando

-----git remote
Lo que haces es enlistar todos los servidores remotos que nuestro reposi-
torio conoce

------git remote add servidorlocal C:/Users/USUARIO/Documents/Oracle-One/8-ServidorGit/
Agregar un servidor remoto a nuestro servidor local, para cada repositorio
que queramos agregar hay que agregar un nombre y agg el camino

-------git remote -v
Para saber si ese servidor local en verdad esta apuntando a nuestro ser-
vidor

Vamos hacer una persona artificial creando otra carpeta y vamos a intentar-
clonar nuestro respositorio para aquella persona artificial(Ana)

---------git clone c/Users/USUARIO/Documents/Oracle-One/8-ServidorGit/ Projecto
Asi clonamos y en la ultima parte damos un espacio y colocamos otro nombre
ya que asi se llamaria la Projecto y no 8-ServidorGit en la carpeta Ana

//////////////////////////////////////
/////////////////////////////////////

Sincronizar datos

---git push servidorlocal master
Vamos a la carpeta donde esta el projecto y luego hacemos git remote para
ver los servidores, en este caso aparecera nuestro servidorlocal, lo que
haremos es es empujar los datos que esta en el carpeta al servidor con el
commando push. La pregunta es hacer desde donde se envia y a donde va. 
Colacamos el nombre que es sevidorlocal y a la branch que en este caso es 
master

---git remote
luego nos vamos a la projecto de la persona en este caso ana y hacemos un 
git remote y por defecto por git aparece uno (origin)

---git remote rename origin local
Lo que hicimos fue que gustavo ejemplo o bruno envio datos al servidor
y ahora ana tiene que traer esos datos al repositorio de ana y entra el
git remote y posteriormente cambiamos el nombre con local 

---git pull servidorlocal master
Vamos a agregar servidor local y dentro de ese servidor cual ramo tenemos
que traer y en este caso es la master. ESTO EN EL MISMO ESPACIO DE ANA

ya luego de esto probamos con ls y ya vemos los archivos correctamente

Hacemos una pruebita en la que ana modifica un poco el archivo

---git push servidorlocal master
Ahora como hicimos unos cambios(add, commit) vamos a enviar los datos con push para ver
si bruno pueda ver los cambios


Ahora nos vamos a donde bruno

---git pull servidorlocal master
Lo que hara bruno es traer los datos del servidor ya que Ana modifco ciertas cosas

//////////////////NOTAAAAAAAAAAA//////////////////
---git push servidorlocal master= Empujar o enviar datos al servidor
---git pull servidorlocal master= Traer datos del servidor



                       Esto esta sincronizacion de datos en un 
                                Servidor Local

git push [repositorio] master

¡Opción correcta! De esta forma enviamos las modificaciones de 
nuestra Branch master (hablaremos más sobre branches dentro de poco) 
hacia el repositorio remoto. Basta con substituir [repositorio] por 
el nombre que dimos al repositorio al agregarlo. Ahora, para traer 
los datos que están en el repositorio remoto, podemos utilizar 
git pull [repositorio] master.


/////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

                            Servidores en la Red GITHUB

Creamos un repositorio en GitHub llamado Alura-Git

---git remote add origin https://github.com/Tavo-21/Alura-Git.git
ese origin es el repositorio remoto principal por defecto, se puede cambiar
ese oring por otro nombre, este caso la mantenemos

---git branch -M main
ha sido cambiado recientemente, anteriormente no era necesario utilizar el comando
para transformar nuestro nombre de la rama master para nuestro main, por ahora
mantenomos ese master y salteamos este comando

---git push -u origin main
Ahi le cambiamos por master, esta -u significa que cada que vamos hacer un push
de nuestra branch master siempre va a ir a origin, en el futuro no seria necesario
ese -u, y asi, ese -u se puede saltar y colocar el resto del comando igual, es para
un mejor proceso de estar seguro de lo se esta haciendo

Como resulado vemos que se enviaron los datos a nuestro repositorio en GitHub

ya podemos compartir codigos ya sea local o en la red

/////////////////////////////////////////////////////////////////////////////
//////////////////////////////// Branches ////////////////////////////////////

Veremos el como se trabaja en conjunto dos personas en un archivo, el de nosotros
y el de ana

---git branch
Con ese comando sabemos que ramas hay disponible o creadas

El comando git branch te permite crear, enumerar y eliminar ramas, así como 
cambiar su nombre. No te permite cambiar entre ramas o volver a unir un historial 
bifurcado. Por este motivo, git branch está estrechamente integrado con los comandos git checkout y git merge 

las ramificaciones para saber en que se esta trabajando

--git branch titulo
con el ultimo se le asigna un nombre a una nueva branch o rama de trabajo

--git checkout titulo
Cambiar de branch o entrar a otra rama

https://git-school.github.io/visualizing-git/ buscar en la web

--git checkout -b lista
Asi podemos con un solo comando crear y cambiar de branch o de raiz

Ahora veremos como llevar el trabajo de una branch a otra en este caso en el 
servidor local tenemos un branch master y lo que haremos en el caso de nosotros
y ana, es que cada uno esta trabajando una branch distinta, (titulo, lista) 
respectivamente y vamos a juntarlas a la principla que es del servidor local


Las branches ("ramas") se utilizan para desarrollar funcionalidades aisladas 
entre sí. La branch master es la branch "predeterminada" cuando creas 
un repositorio.

Es interesante separar el desarrollo de funcionalidades en diferentes 
branches, para que los cambios en el código de una no influyan en el funcionamiento de otra.

En esta aula, entenderemos mejor cómo trabajar con estas ramas, pero es 
muy importante que comprenda su propósito.

En otros cursos aquí en Alura, hablaremos más sobre estrategias para 
organizar tus branches, entonces no te preocupes tanto por eso ahora. ;-)


////////////////////////Uniendo branches////////////////////////////////////////

--git merge titulo
Este comando es ejecutado desde la rama master

para salir cuando se haya hecho eso es :x y enter. Cuando revisamos con git log
vemos que se hizo un commit con el siguiente nombre Merge branch 'titulo', ese
representa los commit de manera global de la rama titulo












